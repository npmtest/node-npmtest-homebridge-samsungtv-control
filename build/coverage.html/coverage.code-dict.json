{"/home/travis/build/npmtest/node-npmtest-homebridge-samsungtv-control/test.js":"/* istanbul instrument in package npmtest_homebridge_samsungtv_control */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-samsungtv-control/lib.npmtest_homebridge_samsungtv_control.js":"/* istanbul instrument in package npmtest_homebridge_samsungtv_control */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_samsungtv_control = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_samsungtv_control = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-samsungtv-control/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-samsungtv-control && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_samsungtv_control */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_samsungtv_control\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_samsungtv_control.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_samsungtv_control.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_samsungtv_control.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_samsungtv_control.__dirname + '/lib.npmtest_homebridge_samsungtv_control.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-samsungtv-control/node_modules/homebridge-samsungtv-control/index.js":"var SamsungRemote = require('samsung-remote');\nvar inherits = require('util').inherits;\nvar Service, Characteristic, VolumeCharacteristic, ChannelCharacteristic, KeyCharacteristic;\n\n/**\n * Just a little helper that guarantees that the callback function is only callable once.\n *\n * @param {Function} callback The actual callback.\n */\nfunction DisposableCallback(callback) {\n\tvar _callback = callback\n\treturn function() {\n\t\t_callback.apply(this, arguments)\n\t\t_callback = function() {\n\t\t\tconsole.log('Warning: Attempt to call disposable callback twice.')\n\t\t}\n\t}\n}\n\nmodule.exports = function(homebridge) {\n\tService = homebridge.hap.Service;\n\tCharacteristic = homebridge.hap.Characteristic;\n\n\t// we can only do this after we receive the homebridge API object\n\tmakeVolumeCharacteristic();\n\tmakeChannelCharacteristic();\n\tmakeKeyCharacteristic();\n\n\thomebridge.registerAccessory(\"homebridge-samsungtv\", \"SamsungTV\", SamsungTvAccessory);\n};\n\n//\n// SoundTouch Accessory\n//\n\nfunction SamsungTvAccessory(log, config) {\n\tthis.log = log;\n\tthis.config = config;\n\tthis.name = config[\"name\"];\n\tthis.ip_address = config[\"ip_address\"];\n\tthis.send_delay = config[\"send_delay\"] || 400;\n\n\tif (!this.ip_address) throw new Error(\"You must provide a config value for 'ip_address'.\");\n\n\tthis.remote = new SamsungRemote({\n\t\tip: this.ip_address // required: IP address of your Samsung Smart TV\n\t});\n\n\tthis.isSendingSequence = false;\n\n\t// The channel value can not be accessed on the tv\n\t// if the normal remote is used to change the channel\n\t// the value will not be updated therefore\n\tthis.channel = 1;\n\n\tthis.service = new Service.Switch(this.name);\n\n\tthis.service\n\t\t.getCharacteristic(Characteristic.On)\n\t\t.on('get', this._getOn.bind(this))\n\t\t.on('set', this._setOn.bind(this));\n\n\tthis.service\n\t\t.addCharacteristic(VolumeCharacteristic)\n\t\t.on('get', this._getVolume.bind(this))\n\t\t.on('set', this._setVolume.bind(this));\n\n\tthis.service\n\t\t.addCharacteristic(ChannelCharacteristic)\n\t\t.on('get', this._getChannel.bind(this))\n\t\t.on('set', this._setChannel.bind(this));\n\n\tthis.service\n\t\t.addCharacteristic(KeyCharacteristic)\n\t\t.on('get', this._getKey.bind(this))\n\t\t.on('set', this._setKey.bind(this));\n}\n\nSamsungTvAccessory.prototype.getInformationService = function() {\n\tvar informationService = new Service.AccessoryInformation();\n\tinformationService\n\t\t.setCharacteristic(Characteristic.Name, this.name)\n\t\t.setCharacteristic(Characteristic.Manufacturer, 'Samsung TV')\n\t\t.setCharacteristic(Characteristic.Model, '1.0.0')\n\t\t.setCharacteristic(Characteristic.SerialNumber, this.ip_address);\n\treturn informationService;\n};\n\nSamsungTvAccessory.prototype.getServices = function() {\n\treturn [this.service, this.getInformationService()];\n};\n\nSamsungTvAccessory.prototype._getOn = function(callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\tthis.remote.isAlive(function(err) {\n\t\tif (err) {\n\t\t\taccessory.log.debug('TV is offline: %s', err);\n\t\t\tcb(null, false);\n\t\t} else {\n\t\t\taccessory.log.debug('TV is alive.');\n\t\t\tcb(null, true);\n\t\t}\n\t});\n};\n\nSamsungTvAccessory.prototype._setOn = function(on, callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\tif (on) {\n\t\tthis.remote.send('KEY_POWERON', function(err) {\n\t\t\tif (err) {\n\t\t\t\taccessory.log.debug('Could not turn TV on: %s', err);\n\t\t\t\tcb(new Error(err));\n\t\t\t} else {\n\t\t\t\taccessory.log.debug('TV successfully turnen on');\n\t\t\t\tcb(null);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.remote.send('KEY_POWEROFF', function(err) {\n\t\t\tif (err) {\n\t\t\t\taccessory.log.debug('Could not turn TV off: %s', err);\n\t\t\t\tcb(new Error(err));\n\t\t\t} else {\n\t\t\t\taccessory.log.debug('TV successfully turnen off');\n\t\t\t\tcb(null);\n\t\t\t}\n\t\t});\n\t}\n};\n\nSamsungTvAccessory.prototype._getVolume = function(callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\tcb(null, 25);\n};\n\nSamsungTvAccessory.prototype._setVolume = function(volume, callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\n\t// Dismiss the request when another key sequence sending\n\tif (this.isSendingSequence) {\n\t\tcb(null);\n\t\tthis.log.debug('Cannot send volume change by %s while sending other key sequence.', volume);\n\t\treturn;\n\t}\n\tthis.isSendingSequence = true;\n\n\t// When volume is 0, mute will be toggled\n\tif (volume === 0) {\n\t\taccessory.remote.send('KEY_MUTE', function(err) {\n\t\t\tif (err) {\n\t\t\t\taccessory.isSendingSequence = false;\n\t\t\t\tcb(new Error(err));\n\t\t\t\taccessory.log.error('Could not send mute key: %s', err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\taccessory.log.debug('Finished sending mute key.');\n\t\t\taccessory.isSendingSequence = false;\n\t\t\tcb(null);\n\t\t});\n\t\treturn;\n\t}\n\n\tthis.log.debug('Changing volume by %s.', volume);\n\n\tvar volumeKey = volume > 0 ? 'KEY_VOLUP' : 'KEY_VOLDOWN';\n\tvar absVolume = Math.abs(volume);\n\n\tfunction sendKey(index) {\n\t\tif (index > 0) {\n\t\t\taccessory.remote.send(volumeKey, function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\taccessory.isSendingSequence = false;\n\t\t\t\t\tcallback(new Error(err));\n\t\t\t\t\taccessory.log.error('Could not send volume key %s: %s', volumeKey, err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Send the next key after the specified delay\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsendKey(--index)\n\t\t\t\t}, accessory.send_delay);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\taccessory.log.debug('Finished changing volume by %s.', volume);\n\t\taccessory.isSendingSequence = false;\n\t\tcb(null);\n\t}\n\tsendKey(absVolume);\n};\n\n\nSamsungTvAccessory.prototype._getChannel = function(callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\n\tcb(null, accessory.channel);\n};\n\nSamsungTvAccessory.prototype._setChannel = function(channel, callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\n\t// Dismiss the request when another key sequence sending\n\tif (this.isSendingSequence) {\n\t\tcb(null);\n\t\tthis.log.debug('Cannot send channel %s while sending other key sequence.', channel);\n\t\treturn;\n\t}\n\tthis.isSendingSequence = true;\n\tthis.log.debug('Sending channel %s.', channel);\n\n\tvar channelInt = parseInt(channel, 10);\n\tif (isNaN(channelInt) || channelInt < 1 || channelInt > 9999) {\n\t\tcb(new Error('Invalid channel \"' + channel + '\"'));\n\t\tthis.log.error('Invalid channel \"%s\".', channel);\n\t\treturn;\n\t}\n\n\tvar chStr = channelInt.toString(),\n\t\tkeys = [];\n\tfor (var i = 0, j = chStr.length; i < j; ++i) {\n\t\tkeys.push('KEY_' + chStr[i]);\n\t}\n\t// Add the enter key to the end\n\tkeys.push('KEY_ENTER');\n\n\tfunction sendKey(index) {\n\t\tif (index < keys.length) {\n\t\t\taccessory.log.debug('Sending channel key %s.', keys[index]);\n\t\t\taccessory.remote.send(keys[index], function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\taccessory.isSendingSequence = false;\n\t\t\t\t\tcb(new Error(err));\n\t\t\t\t\taccessory.log.error('Could not send channel key %s: %s', keys[index], err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Send the next key after the specified delay\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsendKey(++index)\n\t\t\t\t}, accessory.send_delay);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\taccessory.log.debug('Finished sending channel %s.', channel);\n\t\taccessory.isSendingSequence = false;\n\t\taccessory.channel = channel;\n\t\tcb(null);\n\t}\n\tsendKey(0)\n};\n\nSamsungTvAccessory.prototype._getKey = function(callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\n\tcb(null, accessory.key);\n};\n\nSamsungTvAccessory.prototype._setKey = function(key, callback) {\n\tvar accessory = this;\n\tvar cb = DisposableCallback(callback)\n\n\t// Dismiss the request when a key sequence is sending\n\tif (this.isSendingSequence) {\n\t\tcb(null);\n\t\tthis.log.debug('Cannot send key %s while sending a key sequence.', key);\n\t\treturn;\n\t}\n\tthis.isSendingSequence = true;\n\tthis.log.debug('Sending key %s.', key);\n\n\taccessory.remote.send('KEY_' + key.toUpperCase(), function(err) {\n\t\tif (err) {\n\t\t\taccessory.isSendingSequence = false;\n\t\t\tcb(new Error(err));\n\t\t\taccessory.log.error('Could not send key %s: %s', key, err);\n\t\t\treturn;\n\t\t}\n\t\taccessory.log.debug('Finished sending key %s.', key);\n\t\taccessory.isSendingSequence = false;\n\t\taccessory.key = key;\n\t\tcb(null);\n\t});\n};\n\n/**\n * Custom characteristic for volume\n *\n * @return {Characteristic} The volume characteristic\n */\nfunction makeVolumeCharacteristic() {\n\n\tVolumeCharacteristic = function() {\n\t\tCharacteristic.call(this, 'Volume', '91288267-5678-49B2-8D22-F57BE995AA00');\n\t\tthis.setProps({\n\t\t\tformat: Characteristic.Formats.INT,\n\t\t\tunit: Characteristic.Units.PERCENTAGE,\n\t\t\tmaxValue: 10,\n\t\t\tminValue: -10,\n\t\t\tminStep: 1,\n\t\t\tperms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n\t\t});\n\t\t//this.value = this.getDefaultValue();\n\t\tthis.value = 1;\n\t};\n\n\tinherits(VolumeCharacteristic, Characteristic);\n}\n\n/**\n * Custom characteristic for channel\n *\n * @return {Characteristic} The channel characteristic\n */\nfunction makeChannelCharacteristic() {\n\n\tChannelCharacteristic = function () {\n\t\tCharacteristic.call(this, 'Channel', '212131F4-2E14-4FF4-AE13-C97C3232499D');\n\t\tthis.setProps({\n\t\t\tformat: Characteristic.Formats.STRING,\n\t\t\tunit: Characteristic.Units.NONE,\n\t\t\t//maxValue: 9999,\n\t\t\t//minValue: 1,\n\t\t\t//minStep: 1,\n\t\t\tperms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n\t\t});\n\t\t//this.value = this.getDefaultValue();\n\t\tthis.value = \"1\";\n\t};\n\n\tinherits(ChannelCharacteristic, Characteristic);\n}\n\n/**\n * Custom characteristic for any key\n * @see(https://github.com/natalan/samsung-remote) The key can be any remote key without the KEY_ at the beginning (e.g. MENU)\n *\n * @return {Characteristic} The key characteristic\n */\nfunction makeKeyCharacteristic() {\n\n\tKeyCharacteristic = function() {\n\t\tCharacteristic.call(this, 'Key', '2A6FD4DE-8103-4E58-BDAC-25835CD006BD');\n\t\tthis.setProps({\n\t\t\tformat: Characteristic.Formats.STRING,\n\t\t\tunit: Characteristic.Units.NONE,\n\t\t\t//maxValue: 10,\n\t\t\t//minValue: -10,\n\t\t\t//minStep: 1,\n\t\t\tperms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n\t\t});\n\t\t//this.value = this.getDefaultValue();\n\t\tthis.value = \"TV\";\n\t};\n\n\tinherits(KeyCharacteristic, Characteristic);\n}"}